<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">

    <!-- Enable features -->
    <featureManager>
        <feature>jakartaee-10.0</feature>
    </featureManager>

    <!-- This template enables security. To get the full use of all the capabilities, a keystore and
    user registry are required. -->

    <!-- For the keystore, default keys are generated and stored in a keystore. To provide the
    keystore password, generate an 
        encoded password using bin/securityUtility encode and add it below in the password attribute of the
    keyStore element. 
        Then uncomment the keyStore element. -->
    <!--
    <keyStore password=""/> 
    -->

    <!--For
    a user registry configuration, configure your user registry. For example, configure a basic user
    registry using the
        basicRegistry element. Specify your own user name below in the name attribute of the user element.
    For the password,
        generate an encoded password using bin/securityUtility encode and add it in the password attribute
    of the user element.
        Then uncomment the user element. -->
    <basicRegistry id="basic" realm="BasicRealm">
        <!--
        <user name="yourUserName" password="" />
        -->
    </basicRegistry>

    <!-- To access this server from a remote client add a host attribute to the following element,
    e.g. host="*" -->
    <httpEndpoint id="defaultHttpEndpoint"
        httpPort="9080"
        httpsPort="9443" />

    <!-- Automatically expand WAR files and EAR files -->
    <applicationManager autoExpand="true" />

    <!-- Default SSL configuration enables trust for default certificates from the Java runtime -->
    <ssl id="defaultSSLConfig" trustDefaultCerts="true" />

    <webApplication id="TransactionTest" location="TransactionTest.war"
        contextRoot="transactions" />
    <!-- 
    <messagingEngine>
        <queue id="libertyQue" />
    </messagingEngine>

    <jmsQueueConnectionFactory id="jms/libertyQCF" jndiName="jms/libertyQCF">
        <properties.wasJms remoteServerAddress="localhost:7276: BootStrapBasic Messaging" />
    </jmsQueueConnectionFactory>

    <jmsQueue id="jms/libertyQue" jndiName="jms/libertyQue">
        <properties.wasJms queueName="libertyQue" />
    </jmsQueue>

    <jmsActivationSpec id="jms-messaging-open-liberty/JmsMessageReader">
        <properties.wasJms destinationRef="jms/libertyQue" />
    </jmsActivationSpec> -->

    <messagingEngine>
        <queue id="jms/HelloQueue" />
    </messagingEngine>

    <jmsQueue id="jms/HelloQueue" jndiName="jms/HelloQueue">
        <properties.wasJms queueName="jms/HelloQueue" />
    </jmsQueue>

    <jmsActivationSpec id="TransactionTest/ReadMessageMDB">
        <properties.wasJms
            destinationRef="jms/HelloQueue"
        />
    </jmsActivationSpec>

    <jmsQueueConnectionFactory jndiName="jms/libertyQCF" connectionManagerRef="ConMgr2">
        <properties.wasJms
            nonPersistentMapping="ExpressNonPersistent"
            persistentMapping="ReliablePersistent" />
    </jmsQueueConnectionFactory>
    <connectionManager id="ConMgr2" maxPoolSize="2" />

    <!-- 
    <messagingEngine>
        <queue id="libertyQ"
            forceReliability="ReliablePersistent"
            maxMessageDepth="5000">
        </queue>
    </messagingEngine>

    <jmsQueueConnectionFactory jndiName="jms/libertyQCF" connectionManagerRef="ConMgr2">
        <properties.wasJms
            nonPersistentMapping="ExpressNonPersistent"
            persistentMapping="ReliablePersistent" />
    </jmsQueueConnectionFactory>
    <connectionManager id="ConMgr2" maxPoolSize="2" />

    <jmsQueue jndiName="jms/libertyQue">
        <properties.wasJms queueName="libertyQ"
            deliveryMode="Application"
            timeToLive="500000"
            priority="1"
            readAhead="AsConnection" />
    </jmsQueue>

    <jmsActivationSpec id="JMSSample/JMSApp/SampleMDB">
        <properties.wasJms destinationRef="jms/libertyQue" />
    </jmsActivationSpec> -->

    <!-- <jmsQueue id="MyQueue" jndiName="jms/MyQueue">
        <properties.wasJms queueName="libertyQ"/>
    </jmsQueue>

    <jmsConnectionFactory jndiName="jms/MyConnectionFactory">
        <properties.wasJms />
    </jmsConnectionFactory> -->
</server>